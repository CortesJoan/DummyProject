//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/CardMatchActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CardMatchActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CardMatchActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CardMatchActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""4441fc8c-f965-4c1d-88bc-a54dd9457549"",
            ""actions"": [
                {
                    ""name"": ""CardClick"",
                    ""type"": ""Value"",
                    ""id"": ""7174bf72-b59d-4578-a82f-429b619f017e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenOptions"",
                    ""type"": ""Button"",
                    ""id"": ""47b1442d-8260-4d85-941a-9f30fa28d140"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RestartGame"",
                    ""type"": ""Button"",
                    ""id"": ""d0457ac3-b789-4120-8863-72cd73204fdf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e985398c-230c-4cef-8078-5e3daf414762"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bbbd9f6-6a52-43ad-8257-f1643803660f"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1561610f-26ff-4aa9-9fa9-6de50d820a6e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenOptions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5f96e9b-57c3-4aed-9fb2-273672b8e2f4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_CardClick = m_Gameplay.FindAction("CardClick", throwIfNotFound: true);
        m_Gameplay_OpenOptions = m_Gameplay.FindAction("OpenOptions", throwIfNotFound: true);
        m_Gameplay_RestartGame = m_Gameplay.FindAction("RestartGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_CardClick;
    private readonly InputAction m_Gameplay_OpenOptions;
    private readonly InputAction m_Gameplay_RestartGame;
    public struct GameplayActions
    {
        private @CardMatchActions m_Wrapper;
        public GameplayActions(@CardMatchActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CardClick => m_Wrapper.m_Gameplay_CardClick;
        public InputAction @OpenOptions => m_Wrapper.m_Gameplay_OpenOptions;
        public InputAction @RestartGame => m_Wrapper.m_Gameplay_RestartGame;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @CardClick.started += instance.OnCardClick;
            @CardClick.performed += instance.OnCardClick;
            @CardClick.canceled += instance.OnCardClick;
            @OpenOptions.started += instance.OnOpenOptions;
            @OpenOptions.performed += instance.OnOpenOptions;
            @OpenOptions.canceled += instance.OnOpenOptions;
            @RestartGame.started += instance.OnRestartGame;
            @RestartGame.performed += instance.OnRestartGame;
            @RestartGame.canceled += instance.OnRestartGame;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @CardClick.started -= instance.OnCardClick;
            @CardClick.performed -= instance.OnCardClick;
            @CardClick.canceled -= instance.OnCardClick;
            @OpenOptions.started -= instance.OnOpenOptions;
            @OpenOptions.performed -= instance.OnOpenOptions;
            @OpenOptions.canceled -= instance.OnOpenOptions;
            @RestartGame.started -= instance.OnRestartGame;
            @RestartGame.performed -= instance.OnRestartGame;
            @RestartGame.canceled -= instance.OnRestartGame;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnCardClick(InputAction.CallbackContext context);
        void OnOpenOptions(InputAction.CallbackContext context);
        void OnRestartGame(InputAction.CallbackContext context);
    }
}
